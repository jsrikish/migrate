in base.js  (before Barchart..)
Highcharts.setOptions({
    lang: {
        thousandsSep: ','
    }
});


desis.js
           series: [
                {
                    name: 'Catalog Area Delivered',
                    // make catalouge spelling consistent
                    data: getSeries(data.desis.aoi_catalog_area, 'catalogue_area'),
                    dataLabels: {
                        enabled: true,
                        // format: '{point.y:.0f}', // one decimal 
                        formatter: function() {
                            if (this.y > 1000000) {
                              return Highcharts.numberFormat(this.y / 1000, 1) + "M"
                            } else if (this.y > 1000) {
                              return Highcharts.numberFormat(this.y / 1000, 1) + "K";
                            } else {
                              return this.y
                            }
                          }
                        },  
                    },
                // },
            ],
        },
        desis_number_of_files: {
        ***************************** in planet.js ************
        legend: {
                 enabled: false
            },
            series: [
                {  
                    name: '',        
                    data: getSeries(data.approved_users.planet_users, 'data')
                }
            ],

        },
        planet_data_downloaded: {
        ********  desis.js
        desis_total_area_tasked: {
            ...LINE_CHART_OPTIONS({
                title:  'Desis Total Area Tasked',
                yAxisText: 'Total Area Tasked (km2)',
                xAxisCategories: getSeries(data.desis.aoi_catalog_area, 'mon_year'),
            }),

            tooltip: {
                formatter: function() {
                if (this.y > 1000000) {
                  return Highcharts.numberFormat(this.y / 1000, 0) + "M"
                } else if (this.y > 1000) {
                  return Highcharts.numberFormat(this.y / 1000, 0) + "K";
                } else {
                  return this.y
                }
              },
            },

            series: [
       
        
        
